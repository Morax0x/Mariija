import {
    EmbedBuilder, PermissionsBitField, ChannelType, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder, StringSelectMenuOptionBuilder, AttachmentBuilder
} from "discord.js";
import { createStatsEmbedPage, createDetailedStatsEmbed, cleanChannelName, embedSimple, createChannelStatsEmbed } from "./utils/embeds.js";
import { createPaginatedListEmbed, postPublisherStatsToAdChannel } from "./extensions.js";
import { createHelpSelectMenu } from "./utils/components.js";
import { checkAdminPermissions, getLang, getDetailedStatsData, HELP_IMAGE_URL, DEFAULT_EMBED_COLOR, CUSTOMIZABLE_COMMANDS, getCustomization } from "./index.js";

const OWNER_ID = '1145327691772481577';
const DB_PATH = "./publisher_stats2.db";
const PAGINATION_LIMIT = 10;
const INVISIBLE_SPACE = '\u200b';
const CHANNEL_STATS_IMAGE = 'https://media.discordapp.net/attachments/1394280285289320550/1432409477272965190/line.png?ex=6900f2c8&is=68ffa148&hm=2d70e700844e8b43474fcba926aa3e6c71773ab47c0beeedc6b9b2f3e99311ed&=&format=webp&quality=lossless';

export async function handleInteraction(interaction, client, db) {
    const interactionId = interaction.id;
    if (!interaction.guild) return;

    try {
        const currentLang = await getLang(interaction.guild.id);

        // --- Select Menu Handler ---
        if (interaction.isStringSelectMenu()) {
            if (interaction.customId === 'help_menu_selector') {
                if (!interaction.deferred && !interaction.replied) await interaction.deferUpdate().catch(e => console.error(`[SelectMenu ${interactionId}] Defer Error:`, e));
                try {
                    const selectedValue = interaction.values[0];
                    const custom = await getCustomization(db, interaction.guild.id, 'help');
                    let embed = new EmbedBuilder().setColor(custom?.embed_color || DEFAULT_EMBED_COLOR).setImage(custom?.embed_image || HELP_IMAGE_URL);
                    let fields = [];
                    if (selectedValue === 'help_main') { embed.setTitle(currentLang.HELP_TITLE).setDescription(currentLang.HELP_DESC); fields = currentLang.HELP_FIELDS.MAIN; }
                    else if (selectedValue === 'help_stats') { embed.setTitle(`✥ قائمة الإحصائيات`).setDescription(currentLang.HELP_DESC); fields = currentLang.HELP_FIELDS.STATS; }
                    else if (selectedValue === 'help_channels') { embed.setTitle(`✥ قائمة إدارة القنوات`).setDescription(currentLang.HELP_DESC); fields = currentLang.HELP_FIELDS.CHANNELS; }
                    else if (selectedValue === 'help_publishers') { embed.setTitle(`✥ قائمة إدارة الناشرين`).setDescription(currentLang.HELP_DESC); fields = currentLang.HELP_FIELDS.PUBLISHERS; }
                    if (fields.length > 0) embed.setFields(fields);
                    await interaction.editReply({ embeds: [embed], components: createHelpSelectMenu() });
                } catch (selectError) {
                    console.error(`[SelectMenu ${interactionId}] Error handling help_menu_selector:`, selectError);
                    if (interaction.deferred || interaction.replied) { await interaction.followUp({ content: "حدث خطأ أثناء تحديث قائمة المساعدة.", ephemeral: true }).catch(()=>{}); }
                }
                return;
            }
        }

        // --- Command Handler ---
        if (interaction.isChatInputCommand()) {
            const commandName = interaction.commandName;
            const args = interaction.options;
            const member = interaction.member;
            const ADMIN_COMMANDS_LIST = ['setprefix', 'addadmin', 'removeadmin', 'setchannels', 'removechannel', 'addpublisher', 'removepublisher', 'resetstats', 'setadchannel', 'customize'];
            const isManagerCommand = ADMIN_COMMANDS_LIST.includes(commandName);

            // Defer Reply (Crucial for avoiding "is thinking" timeout)
            let replyMethod = interaction.editReply.bind(interaction); // Bind to interaction for correct context
            if (!interaction.deferred && !interaction.replied) {
                try {
                    await interaction.deferReply({ ephemeral: isManagerCommand });
                } catch (deferError) {
                    console.error(`[Command /${commandName} ${interactionId}] Defer Reply Error:`, deferError);
                    return;
                }
            } else if (interaction.replied) {
                replyMethod = interaction.followUp.bind(interaction);
            }

            // Permission check
            if (isManagerCommand) {
                const hasPermission = await checkAdminPermissions(null, currentLang, member);
                if (!hasPermission) {
                    await replyMethod({ content: `✥ مـا عنـدك صلاحـيات انقلـع <a:6FU:1395708477237628959>`, ephemeral: true });
                    return;
                }
            }

            // Execute command logic
            try {
                if (commandName === 'customize') { const targetCommand = args.getString('command'); const imageInput = args.getString('image'); const colorInput = args.getString('color'); let imageUrl = null; let colorCode = null; let resetImage = false; let resetColor = false; if (imageInput) { if (imageInput.toLowerCase() === 'reset') { resetImage = true; } else if (imageInput.startsWith('http')) { imageUrl = imageInput; } else { throw new Error(currentLang.CUSTOMIZE_INVALID_URL); } } if (colorInput) { if (colorInput.toLowerCase() === 'reset') { resetColor = true; } else if (/^#[0-9A-F]{6}$/i.test(colorInput)) { colorCode = colorInput; } else { throw new Error(currentLang.CUSTOMIZE_INVALID_COLOR); } } if (!imageUrl && !colorCode && !resetImage && !resetColor) { throw new Error("يجب تحديد صورة أو لون أو 'reset'."); } const current = await db.get("SELECT embed_image, embed_color FROM customizations WHERE guild_id = ? AND command_name = ?", interaction.guild.id, targetCommand); const finalImage = resetImage ? null : (imageUrl !== null ? imageUrl : current?.embed_image); const finalColor = resetColor ? null : (colorCode !== null ? colorCode : current?.embed_color); await db.run( `INSERT INTO customizations (guild_id, command_name, embed_image, embed_color) VALUES (?, ?, ?, ?) ON CONFLICT(guild_id, command_name) DO UPDATE SET embed_image = excluded.embed_image, embed_color = excluded.embed_color`, interaction.guild.id, targetCommand, finalImage, finalColor ); let successMsg = currentLang.CUSTOMIZE_SUCCESS.replace('{command}', targetCommand); if (resetImage || resetColor) { successMsg = currentLang.CUSTOMIZE_RESET_SUCCESS.replace('{command}', targetCommand); } await replyMethod({ content: successMsg }); }
                else if (commandName === 'stats') { const targetUser = args.getUser('user') || interaction.user; const targetChannelOption = args.getChannel('channel'); if (!args.getUser('user') && !targetChannelOption) { const pageSize = 5; const rows = await db.all(`SELECT p.user_id, SUM(cp.points) AS total_points FROM publishers p LEFT JOIN channel_points cp ON p.user_id = cp.user_id AND p.guild_id = cp.guild_id WHERE p.guild_id = ? GROUP BY p.user_id ORDER BY total_points DESC`, interaction.guild.id); const custom = await getCustomization(db, interaction.guild.id, 'stats_top'); const { embed, components } = await createStatsEmbedPage(interaction.guild, rows, 0, pageSize, currentLang, custom); await replyMethod({ embeds: [embed], components: components }); } else { const { pointsData, dateData, monitoredChannels } = await getDetailedStatsData(targetUser.id, interaction.guild.id, 0); if (targetChannelOption) { const channelIdToQuery = targetChannelOption.id; const config = await db.get("SELECT monitored_channels FROM config WHERE guild_id = ?", interaction.guild.id); const monitored = config?.monitored_channels ? config.monitored_channels.split(",").filter(Boolean) : []; if (!monitored.includes(channelIdToQuery)) { const errorData = currentLang.ERROR_CHANNEL_NOT_MONITORED; await replyMethod({ embeds: [embedSimple(errorData.title, errorData.description, 0xcc0000)], ephemeral: true }); return; } const channelStats = await db.get("SELECT points FROM channel_points WHERE guild_id = ? AND user_id = ? AND channel_id = ?", interaction.guild.id, targetUser.id, channelIdToQuery); const pointsInChannel = channelStats?.points || 0; const overallPoints = pointsData.allTotalPoints; const channelEmbed = embedSimple(currentLang.STATS_USER_CHANNEL_TITLE.replace('{nickname}', targetUser.username), INVISIBLE_SPACE, DEFAULT_EMBED_COLOR).setThumbnail(targetUser.displayAvatarURL({ dynamic: true, size: 256 })).addFields({ name: currentLang.STATS_CHANNEL_NAME_FIELD, value: `<#${channelIdToQuery}>`, inline: false }, { name: currentLang.STATS_CHANNEL_POINTS, value: `**${pointsInChannel}**`, inline: true }, { name: currentLang.STATS_CHANNEL_TOTAL, value: `**${overallPoints}**`, inline: true } ); await replyMethod({ embeds: [channelEmbed] }); } else { const { embed, components } = await createDetailedStatsEmbed(targetUser, interaction.guild, currentLang, 0, pointsData, dateData, monitoredChannels, 0); await replyMethod({ embeds: [embed], components: components }); } } }
                else if (commandName === 'channelstats') { const targetChannelOption = args.getChannel('channel'); const config = await db.get("SELECT monitored_channels FROM config WHERE guild_id = ?", interaction.guild.id); const monitoredChannelsIds = config?.monitored_channels ? config.monitored_channels.split(",").filter(Boolean) : []; if (monitoredChannelsIds.length === 0) { await replyMethod({ embeds: [embedSimple(currentLang.ERROR_NO_CHANNELS_SET, "", 0xcc0000)], ephemeral: true }); return; } const channelsToQuery = targetChannelOption ? [targetChannelOption.id] : monitoredChannelsIds; const { embed, components } = await createChannelStatsEmbed(interaction.guild, channelsToQuery, 0, currentLang, 'all', 0, db); embed.setImage(CHANNEL_STATS_IMAGE); await replyMethod({ embeds: [embed], components: components }); }
                else if (commandName === 'setprefix') { const newPrefix = args.getString('new_prefix'); await db.run(`INSERT OR REPLACE INTO config (guild_id, prefix) VALUES (?, ?)`, interaction.guild.id, newPrefix); await replyMethod({ embeds: [embedSimple(currentLang.SUCCESS_PREFIX_SET.replace('{newPrefix}', newPrefix), "", 0x00aa00)] }); }
                else if (commandName === 'addadmin') { const mentionedUser = args.getUser('user'); const user = await client.users.fetch(mentionedUser.id).catch(() => null); if (!user) { await replyMethod({ embeds: [embedSimple(currentLang.ERROR_MENTION_USER.title, currentLang.ERROR_MENTION_USER.description, 0xcc0000)], ephemeral: true }); return; } const config = await db.get("SELECT admin_role_id FROM config WHERE guild_id = ?", interaction.guild.id); let currentAdmins = config?.admin_role_id ? config.admin_role_id.split(',').filter(id => id.trim() !== '') : []; if (currentAdmins.includes(user.id)) { const errorEmbed = new EmbedBuilder().setTitle(`✶ هـو بالفعـل مشرف نشر ؟`).setDescription(`المستخدم **${user.tag}** هو بالفعل مشرف نشر.`).setColor(0xffcc00); await replyMethod({ embeds: [errorEmbed] }); return; } currentAdmins.push(user.id); const newAdminsCsv = currentAdmins.join(','); await db.run("INSERT INTO config (guild_id, admin_role_id) VALUES (?, ?) ON CONFLICT(guild_id) DO UPDATE SET admin_role_id = excluded.admin_role_id", interaction.guild.id, newAdminsCsv); const date = new Date().toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' }); const successEmbed = new EmbedBuilder().setTitle(currentLang.SUCCESS_ADMIN_USER_SET).setDescription(`✶ تـم تعييـن ${user.tag} كـ مشرف\n✶ تاريخ التعيين: ${date}`).setThumbnail(user.displayAvatarURL({ extension: 'png', size: 256 })).setColor(0x00aa00); await replyMethod({ embeds: [successEmbed] }); }
                else if (commandName === 'removeadmin') { const mentionedUser = args.getUser('user'); const user = await client.users.fetch(mentionedUser.id).catch(() => null); if (!user) { await replyMethod({ embeds: [embedSimple(currentLang.ERROR_MENTION_USER.title, currentLang.ERROR_MENTION_USER.description, 0xcc0000)], ephemeral: true }); return; } const config = await db.get("SELECT admin_role_id FROM config WHERE guild_id = ?", interaction.guild.id); let currentAdmins = config?.admin_role_id ? config.admin_role_id.split(',').filter(id => id.trim() !== '') : []; const initialCount = currentAdmins.length; const newAdmins = currentAdmins.filter(id => id !== user.id); if (newAdmins.length === initialCount) { await replyMethod({ embeds: [embedSimple("خطأ", currentLang.ERROR_ADMIN_NOT_LISTED.replace('{userName}', user.tag), 0xcc0000)] }); return; } const newAdminsCsv = newAdmins.join(','); await db.run(`UPDATE config SET admin_role_id = ? WHERE guild_id = ?`, newAdminsCsv, interaction.guild.id); const successEmbed = new EmbedBuilder().setTitle(`${currentLang.SUCCESS_ADMIN_REMOVED} (${user.tag})`).setDescription(`تـم ازالتـه من مشرفين النشر`).setColor(0xFF0000).setThumbnail(user.displayAvatarURL({ extension: 'png', size: 256 })); await replyMethod({ embeds: [successEmbed] }); }
                else if (commandName === 'setchannels') { const channelInputs = args.getString('channels').match(/(<#\d+>|\d+)/g) || []; let channelIds = []; const itemsAddedNames = []; const allowedTypesToAddDirectly = [ ChannelType.GuildText, ChannelType.GuildAnnouncement, ChannelType.PublicThread, ChannelType.PrivateThread, ChannelType.AnnouncementThread ]; const categoryChildTypes = [ ChannelType.GuildText, ChannelType.GuildAnnouncement ]; for (const input of channelInputs) { const id = input.replace(/<#|>/g, ''); const fetched = await interaction.guild.channels.fetch(id).catch(() => null); if (fetched) { if (fetched.type === ChannelType.GuildCategory) { fetched.children.cache.forEach(child => { if (categoryChildTypes.includes(child.type) && !channelIds.includes(child.id)) { channelIds.push(child.id); itemsAddedNames.push(`<#${child.id}>`); } }); } else if (fetched.type === ChannelType.GuildForum) { try { const activeThreads = await fetched.threads.fetchActive(); activeThreads.threads.forEach(thread => { if (!channelIds.includes(thread.id)) { channelIds.push(thread.id); itemsAddedNames.push(`💬 ${cleanChannelName(thread.name)} (<#${thread.id}>)`); } }); } catch (forumError) {} } else if (allowedTypesToAddDirectly.includes(fetched.type) && !channelIds.includes(fetched.id)) { channelIds.push(fetched.id); itemsAddedNames.push(`<#${fetched.id}>`); } } } channelIds = [...new Set(channelIds)]; if (channelIds.length === 0) { await replyMethod({ embeds: [embedSimple("خطأ", "لم يتم العثور على أي قنوات/عناصر صالحة للإضافة.", 0xcc0000)], ephemeral: true }); return; } const currentConfig = await db.get("SELECT monitored_channels FROM config WHERE guild_id = ?", interaction.guild.id); const existing = currentConfig?.monitored_channels ? currentConfig.monitored_channels.split(",").filter(Boolean) : []; const updated = [...new Set([...existing, ...channelIds])].join(","); await db.run("INSERT INTO config (guild_id, monitored_channels) VALUES (?, ?) ON CONFLICT(guild_id) DO UPDATE SET monitored_channels = excluded.monitored_channels", interaction.guild.id, updated); const names = itemsAddedNames.length > 15 ? `${itemsAddedNames.slice(0, 15).join(", ")} و ${itemsAddedNames.length - 15} آخرين...` : itemsAddedNames.join(", "); await replyMethod({ embeds: [embedSimple(currentLang.SUCCESS_CHANNELS_TITLE, currentLang.SUCCESS_CHANNELS_SET.replace("{channels}", names), 0x00aa00)] }); }
                else if (commandName === 'removechannel') { const channelInputs = args.getString('channels').match(/(<#\d+>|\d+)/g) || []; let channelsToRemove = []; const allowedTypesToRemove = [ ChannelType.GuildText, ChannelType.GuildAnnouncement, ChannelType.PublicThread, ChannelType.PrivateThread, ChannelType.AnnouncementThread ]; const categoryChildTypesToRemove = [ ChannelType.GuildText, ChannelType.GuildAnnouncement ]; for (const input of channelInputs) { const id = input.replace(/<#|>/g, ''); const fetched = await interaction.guild.channels.fetch(id).catch(() => null); if (fetched) { if (fetched.type === ChannelType.GuildCategory) { fetched.children.cache.forEach(child => { if (categoryChildTypesToRemove.includes(child.type) && !channelsToRemove.includes(child.id)) channelsToRemove.push(child.id); }); } else if (fetched.type === ChannelType.GuildForum) { try { const activeThreads = await fetched.threads.fetchActive(); activeThreads.threads.forEach(thread => { if (!channelsToRemove.includes(thread.id)) channelsToRemove.push(thread.id); }); } catch (forumError) {} } else if (allowedTypesToRemove.includes(fetched.type) && !channelsToRemove.includes(fetched.id)) { channelsToRemove.push(fetched.id); } } } channelsToRemove = [...new Set(channelsToRemove)]; if (channelsToRemove.length === 0) { await replyMethod({ embeds: [embedSimple("خطأ", "لم يتم العثور على أي قنوات/عناصر صالحة للإزالة.", 0xcc0000)], ephemeral: true }); return; } const config = await db.get("SELECT monitored_channels FROM config WHERE guild_id = ?", interaction.guild.id); let currentChannels = config?.monitored_channels ? config.monitored_channels.split(",").filter(Boolean) : []; let removedChannelsIds = []; const channelsToRemoveSet = new Set(channelsToRemove); const newChannels = currentChannels.filter(id => { if (channelsToRemoveSet.has(id)) { removedChannelsIds.push(id); return false; } return true; }); if (removedChannelsIds.length === 0) { const mentionedList = channelsToRemove.map(id => `<#${id}>`).join(" , "); await replyMethod({ embeds: [embedSimple("خطأ في الإزالة", `العناصر التي حددتها (${mentionedList}) لم تكن مُعيّنة للمراقبة أصلاً.`, 0xcc0000)] }); return; } const csv = newChannels.join(","); await db.run(`UPDATE config SET monitored_channels = ? WHERE guild_id = ?`, csv, interaction.guild.id); const removedChannelList = removedChannelsIds.map(id => `<#${id}>`).join(" , "); await replyMethod({ embeds: [embedSimple(currentLang.SUCCESS_CHANNEL_REMOVED_TITLE, currentLang.SUCCESS_CHANNEL_REMOVED.replace('{channels}', removedChannelList), 0xFF0000)] }); }
                else if (commandName === 'setadchannel') { const channel = args.getChannel('channel'); if (!channel || (channel.type !== ChannelType.GuildText && channel.type !== ChannelType.GuildAnnouncement)) { await replyMethod({ embeds: [embedSimple("خطأ", "فضلاً، حدد قناة نصية أو قناة إعلانات.", 0xcc0000)], ephemeral: true }); return; } await db.run("INSERT INTO config (guild_id, ad_channel_id, top_list_message_id) VALUES (?, ?, NULL) ON CONFLICT(guild_id) DO UPDATE SET ad_channel_id = excluded.ad_channel_id, top_list_message_id = NULL", interaction.guild.id, channel.id); await replyMethod({ embeds: [embedSimple(currentLang.SUCCESS_AD_CHANNEL_SET_TITLE, currentLang.SUCCESS_AD_CHANNEL_SET_DESC.replace('{channel}', channel.toString()), 0x00aa00)] }); }
                else if (commandName === 'addpublisher') { const usersInput = args.getString('users'); const userIds = new Set(); const mentionRegex = /<@!?(\d{17,19})>/g; const idRegex = /\b(\d{17,19})\b/g; let match; while ((match = mentionRegex.exec(usersInput)) !== null) { userIds.add(match[1]); } while ((match = idRegex.exec(usersInput)) !== null) { if (!usersInput.substring(0, match.index).endsWith('<@') && !usersInput.substring(0, match.index).endsWith('<@!')) { userIds.add(match[1]); } } if (userIds.size === 0) { await replyMethod({ embeds: [embedSimple(currentLang.ERROR_PUBLISHERS_ADD_NONE.title, currentLang.ERROR_PUBLISHERS_ADD_NONE.description, 0xcc0000)], ephemeral: true }); return; } let addedUsers = []; let failedUsers = []; const custom = await getCustomization(db, interaction.guild.id, 'addpublisher'); for (const userId of userIds) { const user = await client.users.fetch(userId).catch(() => null); if (!user) { failedUsers.push(`ID: ${userId} ${currentLang.PUBLISHER_ADD_FAIL_FETCH}`); continue; } try { await db.run("INSERT INTO publishers (guild_id, user_id, display_name, last_post_date) VALUES (?,?,?,?)", interaction.guild.id, user.id, user.tag, new Date().toISOString()); addedUsers.push(user.tag); await postPublisherStatsToAdChannel(client, db, user, interaction.guild.id, currentLang); await new Promise(resolve => setTimeout(resolve, 300)); } catch (e) { if (e.code === 'SQLITE_CONSTRAINT') { failedUsers.push(`${user.tag} ${currentLang.PUBLISHER_ADD_FAIL_ALREADY}`); } else { failedUsers.push(`${user.tag} ${currentLang.PUBLISHER_ADD_FAIL_DB}`); console.error(`Add Pub Slash Err (${user.tag}):`, e); } } } if (failedUsers.length === 0 && addedUsers.length > 0) { if (addedUsers.length === 1) { const user = await client.users.fetch([...userIds][0]); const date = new Date().toLocaleDateString('en-US',{year:'numeric',month:'2-digit',day:'2-digit'}); const successEmbed = new EmbedBuilder().setTitle(currentLang.SUCCESS_PUBLISHER_ADDED_TITLE).setDescription(currentLang.SUCCESS_PUBLISHER_ADDED_DESC.replace('{tag}', user.tag)).setColor(custom?.embed_color || 0x00aa00).setThumbnail(user.displayAvatarURL({extension:'png',size:256})).addFields({name:currentLang.SUCCESS_PUBLISHER_ADDED_FIELD_1,value:`${user.tag}`,inline:true},{name:currentLang.SUCCESS_PUBLISHER_ADDED_FIELD_2,value:`${date}`,inline:true},{name:INVISIBLE_SPACE,value:INVISIBLE_SPACE,inline:true}).setTimestamp().setImage(custom?.embed_image || null); await replyMethod({ embeds: [successEmbed] }); } else { const embed = embedSimple(currentLang.SUCCESS_PUBLISHERS_ADDED_TITLE, `${currentLang.SUCCESS_PUBLISHERS_ADDED_DESC}\n- ${addedUsers.join('\n- ')}`, 0x00aa00); await replyMethod({ embeds: [embed] }); } } else if (addedUsers.length > 0) { const embed = embedSimple(currentLang.ERROR_PUBLISHERS_ADD_FAIL_TITLE, `${currentLang.SUCCESS_PUBLISHERS_ADDED_DESC}\n- ${addedUsers.join('\n- ')}\n\n${currentLang.ERROR_PUBLISHERS_ADD_FAIL_DESC}\n- ${failedUsers.join('\n- ')}`, 0xffcc00); await replyMethod({ embeds: [embed] }); } else { const embed = embedSimple(currentLang.ERROR_PUBLISHERS_ADD_FAIL_TITLE, `${currentLang.ERROR_PUBLISHERS_ADD_FAIL_DESC}\n- ${failedUsers.join('\n- ')}`, 0xcc0000); await replyMethod({ embeds: [embed] }); } }
                else if (commandName === 'removepublisher') { const mentionedUser = args.getUser('user'); const user = await client.users.fetch(mentionedUser.id).catch(() => null); if (!user) { await replyMethod({ embeds: [embedSimple(currentLang.ERROR_MENTION_USER.title, currentLang.ERROR_MENTION_USER.description, 0xcc0000)], ephemeral: true }); return; } const publisherData = await db.get("SELECT ad_message_id FROM publishers WHERE guild_id = ? AND user_id = ?", interaction.guild.id, user.id); const adMessageId = publisherData?.ad_message_id; const stats = await db.get("SELECT SUM(points) AS total_points FROM channel_points WHERE guild_id = ? AND user_id = ?", interaction.guild.id, user.id); const totalPoints = stats?.total_points || 0; const resultPub = await db.run("DELETE FROM publishers WHERE guild_id = ? AND user_id = ?", interaction.guild.id, user.id); if (resultPub.changes === 0) { await replyMethod({ embeds: [embedSimple(currentLang.ERROR_PUBLISHER_NOT_FOUND_TITLE.replace('{tag}', user.tag), currentLang.ERROR_PUBLISHER_NOT_FOUND, 0xcc0000)], ephemeral: true }); return; } await db.run("DELETE FROM channel_points WHERE guild_id = ? AND user_id = ?", interaction.guild.id, user.id); await db.run("DELETE FROM post_history WHERE guild_id = ? AND user_id = ?", interaction.guild.id, user.id); if (adMessageId) { let adChannel = null; try { const config = await db.get("SELECT ad_channel_id FROM config WHERE guild_id = ?", interaction.guild.id); if (config && config.ad_channel_id) { adChannel = await client.channels.fetch(config.ad_channel_id).catch(()=>{}); } if (adChannel) { await adChannel.messages.delete(adMessageId).catch(err => { if (err.code !== 10008) { console.error(`Remove Pub Slash Err (Delete Ad Msg ${adMessageId}): ${err.message}`); } }); } } catch (e) { console.error(`Remove Pub Slash Err (Outer): ${e.message}`); } } const removeEmbed = new EmbedBuilder().setTitle(currentLang.SUCCESS_PUBLISHER_REMOVED).setDescription("تمت ازالته وحذف سجلات النقاط بنـجاح").setColor(0xFF0000).setThumbnail(user.displayAvatarURL({ extension: 'png', size: 256 })).setTimestamp().addFields({ name: "✶الـنـاشـر", value: `${user}`, inline: true }, { name: "✶النقاط", value: `**${totalPoints}**`, inline: true }, { name: INVISIBLE_SPACE, value: INVISIBLE_SPACE, inline: true }); await replyMethod({ embeds: [removeEmbed] }); }
                else if (commandName === 'resetstats') { const mentionedUser = args.getUser('user'); const resetMode = args.getString('channels'); let successMessage; if (resetMode === 'all') { await db.run("DELETE FROM post_history WHERE guild_id = ? AND user_id = ?", interaction.guild.id, mentionedUser.id); await db.run("DELETE FROM channel_points WHERE guild_id = ? AND user_id = ?", interaction.guild.id, mentionedUser.id); successMessage = currentLang.SUCCESS_STATS_RESET_ALL.replace('{tag}', mentionedUser.tag); } else { successMessage = currentLang.SUCCESS_STATS_RESET_USER.replace('{tag}', mentionedUser.tag); await db.run("UPDATE channel_points SET points = 0 WHERE guild_id = ? AND user_id = ?", interaction.guild.id, mentionedUser.id); } await replyMethod({ embeds: [embedSimple("✅ إعادة تعيين النقاط", successMessage, 0x00aa00)] }); }
                else if (commandName === 'listpublishers') { const rows = await db.all(`SELECT user_id FROM publishers WHERE guild_id = ? ORDER BY display_name ASC`, interaction.guild.id); let listItems = rows.map((row, index) => `${index + 1} - <@${row.user_id}>`); if (rows.length === 0) listItems = [currentLang.ERROR_NO_PUBLISHERS]; const custom = await getCustomization(db, interaction.guild.id, 'listpublishers'); const { embed, components } = createPaginatedListEmbed("✥ قائمة الناشرين المسجلين", listItems, 0, PAGINATION_LIMIT, "list_pub_page", custom); await replyMethod({ embeds: [embed], components: components }); }
                else if (commandName === 'listadmins') { const config = await db.get("SELECT admin_role_id FROM config WHERE guild_id = ?", interaction.guild.id); const adminUserIds = config?.admin_role_id ? config.admin_role_id.split(',').filter(Boolean) : []; let listItems = adminUserIds.map((id, index) => `${index + 1} - <@${id}>`); if (adminUserIds.length === 0) listItems = ["لا يوجد مشرفون معينون."]; const custom = await getCustomization(db, interaction.guild.id, 'listadmins'); const { embed, components } = createPaginatedListEmbed(`✥ قائمة المشرفين`, listItems, 0, PAGINATION_LIMIT, "list_admin_page", custom); await replyMethod({ embeds: [embed], components: components }); }
                else if (commandName === 'listchannels') { const config = await db.get("SELECT monitored_channels FROM config WHERE guild_id = ?", interaction.guild.id); const monitoredChannelsIds = config?.monitored_channels ? config.monitored_channels.split(",").filter(Boolean) : []; let listItems = []; if (monitoredChannelsIds.length === 0) listItems = [currentLang.ERROR_NO_CHANNELS_SET]; else listItems = monitoredChannelsIds.map((id, index) => `${index + 1} - <#${id}>`); const custom = await getCustomization(db, interaction.guild.id, 'listchannels'); const { embed, components } = createPaginatedListEmbed(currentLang.SUCCESS_CHANNELS_LIST_TITLE, listItems, 0, PAGINATION_LIMIT, "list_ch_page", custom); await replyMethod({ embeds: [embed], components: components }); }
                else if (commandName === 'help') { const custom = await getCustomization(db, interaction.guild.id, 'help'); const helpEmbed = new EmbedBuilder() .setTitle(currentLang.HELP_TITLE) .setDescription(currentLang.HELP_DESC) .setColor(custom?.embed_color || DEFAULT_EMBED_COLOR) .setImage(custom?.embed_image || HELP_IMAGE_URL) .setFields(currentLang.HELP_FIELDS.MAIN); await replyMethod({ embeds: [helpEmbed], components: createHelpSelectMenu() }); }
                else { await replyMethod({ content: "أمر سلاش غير معروف.", ephemeral: true }); }

            } catch (cmdError) {
                 console.error(`[Command /${commandName} ${interactionId}] Execution Error:`, cmdError);
                 await replyMethod({ content: `❌ حدث خطأ أثناء تنفيذ الأمر: ${cmdError.message.substring(0, 100)}`, embeds: [], components: [], ephemeral: true }).catch(console.error);
             }
            return;
        }

        // --- Button Handler ---
        if (interaction.isButton()) { /* ... الكود من الرد السابق ... */ }

    } catch (e) {
        console.error(`[Interaction Handler] FATAL UNCAUGHT error processing interaction ${interactionId}: ${e.message}`, e);
        try {
            const errorReplyMethod = interaction.deferred || interaction.replied ? interaction.followUp : interaction.reply;
            await errorReplyMethod({ content: "❌ حدث خطأ داخلي فادح أثناء معالجة تفاعلك.", flags: (interaction.deferred || interaction.replied) ? 64 : undefined , ephemeral: true }).catch(console.error);
        } catch (replyError) { console.error("[Interaction Handler] FATAL: Failed to send final error reply:", replyError); }
    }
}