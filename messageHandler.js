import { EmbedBuilder, ChannelType, ActionRowBuilder, AttachmentBuilder } from "discord.js";
import { writeFile } from 'fs/promises';
import fetch from 'node-fetch';
import { createStatsEmbedPage, createDetailedStatsEmbed, cleanChannelName, embedSimple, createChannelStatsEmbed } from "./utils/embeds.js";
import { createPaginatedListEmbed, postPublisherStatsToAdChannel } from "./extensions.js";
import { createHelpSelectMenu } from "./utils/components.js";
import { checkAdminPermissions, getLang, getPrefix, sendUserError, extractLinksCount, getDetailedStatsData, initDb, البادئة, OWNER_ID, DB_PATH, getCustomization, HELP_IMAGE_URL, DEFAULT_EMBED_COLOR } from "./index.js";

const PAGINATION_LIMIT = 10;
const INVISIBLE_SPACE = '\u200b';
const CHANNEL_STATS_IMAGE = 'https://media.discordapp.net/attachments/1394280285289320550/1432409477272965190/line.png?ex=6900f2c8&is=68ffa148&hm=2d70e700844e8b43474fcba926aa3e6c71773ab47c0beeedc6b9b2f3e99311ed&=&format=webp&quality=lossless'; // Added image import for channelstats prefix

async function getChannelIdToRecord(message, monitoredChannels) {
    if (!message.guild || !monitoredChannels || monitoredChannels.length === 0) return null;
    const messageChannelId = message.channel.id;
    if (monitoredChannels.includes(messageChannelId)) {
        if (message.channel.type === ChannelType.GuildForum) { return null; }
        return messageChannelId;
    }
    return null;
}

export async function handleMessageDelete(message, client, db) { /* ... */ }
export async function handleMessageUpdate(oldMessage, newMessage, client, db) { /* ... */ }

export async function handleMessageCreate(message, client, getDbInstance) {
    if (message.author.bot) return;
    const isDM = !message.guild;
    const guildId = isDM ? null : message.guild.id;
    let currentLang = await getLang(guildId);
    let currentPrefix = البادئة;
    let db = getDbInstance();

    if (!db && !isDM) { return; }
    if (!isDM) { try { currentPrefix = await getPrefix(guildId); } catch (e) { console.error(`Prefix Error: ${e}`); } }
    if (!currentPrefix) currentPrefix = البادئة;

    if (message.content.startsWith(currentPrefix)) {
        const args = message.content.slice(currentPrefix.length).trim().split(/\s+/);
        const cmd = args.shift().toLowerCase();
        let commandAttempted = true;

        // --- Owner Commands ---
        if (cmd === "do" && message.author.id === OWNER_ID) { try { const attachment = new AttachmentBuilder(DB_PATH, { name: 'publisher_stats2.db' }); await message.author.send({ files: [attachment] }); if (!isDM) await message.reply(currentLang.SUCCESS_DB_DOWNLOADED).catch(()=>{}); else await message.author.send(currentLang.SUCCESS_DB_DOWNLOADED).catch(()=>{}); } catch (e) { console.error("!do Error:", e); await message.author.send(`Error: ${e.message}`).catch(()=>{}); if (!isDM) await message.reply(`Error: ${e.message}`).catch(()=>{}); } return; }
        if (cmd === "up" && message.author.id === OWNER_ID) { try { if (!isDM || message.attachments.size !== 1) { return message.reply(currentLang.ERROR_DB_UPLOAD_NO_FILE + " (DM only)").catch(console.error); } const attachment = message.attachments.first(); if (!attachment.name.endsWith('.db')) { return message.reply(currentLang.ERROR_DB_UPLOAD_NO_FILE).catch(console.error); } await message.reply(currentLang.SUCCESS_DB_UPLOADED).catch(console.error); const response = await fetch(attachment.url); if (!response.ok) throw new Error(`Fetch fail: ${response.statusText}`); const data = Buffer.from(await response.arrayBuffer()); let currentDb = getDbInstance(); if(currentDb) { try { await currentDb.close(); } catch(closeErr){ console.error("Close DB err:", closeErr); } } await writeFile(DB_PATH, data); const reconnected = await initDb(true); if (!reconnected) throw new Error("Reconnect fail."); db = getDbInstance(); await message.author.send(currentLang.SUCCESS_DB_REPLACED).catch(console.error); } catch (e) { console.error("!up Error:", e); await initDb(true); db = getDbInstance(); await message.author.send(currentLang.ERROR_DB_UPLOAD_FAIL.replace('{error}', e.message)).catch(console.error); } return; }

        // --- Guild Commands ---
        if (!isDM) {
            let hasPermission = false;
            const isAdminCommand = ["setprefix", "addadmin", "removeadmin", "setchannels", "removechannel", "addpublisher", "removepublisher", "resetstats", "setadchannel"];
            const requiresAdmin = isAdminCommand.includes(cmd);
            if (requiresAdmin) { hasPermission = await checkAdminPermissions(message, currentLang, message.member); }
            else { hasPermission = true; }

            if (!hasPermission) { return; }

            try {
                if (cmd === "help") {
                    const custom = await getCustomization(db, guildId, 'help');
                    const helpEmbed = new EmbedBuilder().setTitle(currentLang.HELP_TITLE).setDescription(currentLang.HELP_DESC).setColor(custom?.embed_color || DEFAULT_EMBED_COLOR).setImage(custom?.embed_image || HELP_IMAGE_URL).setFields(currentLang.HELP_FIELDS.MAIN);
                    await message.channel.send({ embeds: [helpEmbed], components: createHelpSelectMenu() });
                }
                else if (cmd === "setprefix") { const newPrefix = args[0]; if (!newPrefix) { await message.channel.send({ embeds: [embedSimple("Error", "Usage: `!setprefix <new_prefix>`", 0xcc0000)] }); } else { await db.run(`INSERT INTO config (guild_id, prefix) VALUES (?, ?) ON CONFLICT(guild_id) DO UPDATE SET prefix = ?`, guildId, newPrefix, newPrefix); await message.channel.send({ embeds: [embedSimple(currentLang.SUCCESS_PREFIX_SET.replace('{newPrefix}', newPrefix), "", 0x00aa00)] }); } }
                else if (cmd === "addadmin") { const mentionedUsers=message.mentions.users;const argsUsers=args.filter(a=>/^\d+$/.test(a));let usersToAdd=[];for(const user of mentionedUsers.values()){usersToAdd.push(user)}for(const id of argsUsers){const fetched=await client.users.fetch(id).catch(()=>null);if(fetched&&!usersToAdd.some(u=>u.id===fetched.id)){usersToAdd.push(fetched)}}; if(usersToAdd.length===0){await sendUserError(message.channel,currentLang); return;} const config=await db.get("SELECT admin_role_id FROM config WHERE guild_id = ?",guildId);let currentAdmins=config?.admin_role_id?config.admin_role_id.split(',').filter(id=>id.trim()!==''):[];let addedUsers=[];let alreadyAdminUsers=[];usersToAdd.forEach(user=>{if(!currentAdmins.includes(user.id)){currentAdmins.push(user.id);addedUsers.push(user)}else{alreadyAdminUsers.push(user)}}); if(addedUsers.length===0){const firstAlreadyAdmin=alreadyAdminUsers[0]; const errorEmbed=new EmbedBuilder().setTitle(`✶ هـو بالفعـل مشرف نشر ؟`).setDescription(`المستخدم **${firstAlreadyAdmin.tag}** هو بالفعل مشرف نشر.`).setColor(0xffcc00); await message.channel.send({embeds:[errorEmbed]}); return;} const newAdminsCsv=currentAdmins.join(',');await db.run("INSERT INTO config (guild_id, admin_role_id) VALUES (?, ?) ON CONFLICT(guild_id) DO UPDATE SET admin_role_id = excluded.admin_role_id",guildId,newAdminsCsv);const firstAddedUser=addedUsers[0];const date=new Date().toLocaleDateString('en-US',{year:'numeric',month:'2-digit',day:'2-digit'}); const successEmbed=new EmbedBuilder().setTitle(currentLang.SUCCESS_ADMIN_USER_SET).setDescription(`✶ تـم تعييـن ${firstAddedUser.tag} كـ مشرف\n✶ تاريخ التعيين: ${date}`).setThumbnail(firstAddedUser.displayAvatarURL({extension:'png',size:256})).setColor(0x00aa00);if(addedUsers.length>1){successEmbed.addFields({name:`(وتم إضافة ${addedUsers.length-1} مستخدم آخر)`,value:addedUsers.slice(1).map(u=>u.tag).join(', '),inline:false})} await message.channel.send({embeds:[successEmbed]}); }
                else if (cmd === "removeadmin") { const mentionedUser=message.mentions.users.first()||await client.users.fetch(args[0]).catch(()=>null);if(!mentionedUser){await sendUserError(message.channel,currentLang); return;} const config=await db.get("SELECT admin_role_id FROM config WHERE guild_id = ?",guildId);let currentAdmins=config?.admin_role_id?config.admin_role_id.split(',').filter(id=>id.trim()!==''):[];const initialCount=currentAdmins.length;const newAdmins=currentAdmins.filter(id=>id!==mentionedUser.id); if(newAdmins.length===initialCount){await message.channel.send({embeds:[embedSimple("خطأ",currentLang.ERROR_ADMIN_NOT_LISTED.replace('{userName}',mentionedUser.tag),0xcc0000)]}); return;} const newAdminsCsv=newAdmins.join(',');await db.run(`UPDATE config SET admin_role_id = ? WHERE guild_id = ?`,newAdminsCsv,guildId);const successEmbed=new EmbedBuilder().setTitle(`${currentLang.SUCCESS_ADMIN_REMOVED} (${mentionedUser.tag})`).setDescription(`تـم ازالتـه من مشرفين النشر`).setColor(0xFF0000).setThumbnail(mentionedUser.displayAvatarURL({extension:'png',size:256}));await message.channel.send({embeds:[successEmbed]}); }
                else if (cmd === "setadchannel") { const channel=message.mentions.channels.first()||await message.guild.channels.fetch(args[0]).catch(()=>null);if(!channel||(channel.type!==ChannelType.GuildText&&channel.type!==ChannelType.GuildAnnouncement)){await message.reply({embeds:[embedSimple("خطأ","فضلاً، منشن قناة نصية أو قناة إعلانات.",0xcc0000)]}); return;} await db.run("INSERT INTO config (guild_id, ad_channel_id, top_list_message_id) VALUES (?, ?, NULL) ON CONFLICT(guild_id) DO UPDATE SET ad_channel_id = excluded.ad_channel_id, top_list_message_id = NULL",guildId,channel.id);await message.reply({embeds:[embedSimple(currentLang.SUCCESS_AD_CHANNEL_SET_TITLE,currentLang.SUCCESS_AD_CHANNEL_SET_DESC.replace('{channel}',channel.toString()),0x00aa00)]}); }
                else if (cmd === "setchannels" || cmd === "Addch") { const mentioned=message.mentions.channels;const argsIds=args.filter(a=>/^\d+$/.test(a));let channelIds=[];const itemsAddedNames=[];const allowedTypesToAddDirectly=[ChannelType.GuildText,ChannelType.GuildAnnouncement,ChannelType.PublicThread,ChannelType.PrivateThread,ChannelType.AnnouncementThread];const categoryChildTypes=[ChannelType.GuildText,ChannelType.GuildAnnouncement];for(const ch of mentioned.values()){if(ch.type===ChannelType.GuildCategory){ch.children.cache.forEach(child=>{if(categoryChildTypes.includes(child.type)&&!channelIds.includes(child.id)){channelIds.push(child.id);itemsAddedNames.push(`<#${child.id}>`)}})}else if(ch.type===ChannelType.GuildForum){try{const activeThreads=await ch.threads.fetchActive();activeThreads.threads.forEach(thread=>{if(!channelIds.includes(thread.id)){channelIds.push(thread.id);itemsAddedNames.push(`💬 ${cleanChannelName(thread.name)}(<#${thread.id}>)`)}})}catch(e){}}else if(allowedTypesToAddDirectly.includes(ch.type)&&!channelIds.includes(ch.id)){channelIds.push(ch.id);itemsAddedNames.push(`<#${ch.id}>`)}} for(const id of argsIds){if(mentioned.has(id))continue;const fetched=await message.guild.channels.fetch(id).catch(()=>null);if(fetched){if(fetched.type===ChannelType.GuildCategory){fetched.children.cache.forEach(child=>{if(categoryChildTypes.includes(child.type)&&!channelIds.includes(child.id)){channelIds.push(child.id);itemsAddedNames.push(`<#${child.id}>`)}})}else if(fetched.type===ChannelType.GuildForum){try{const activeThreads=await fetched.threads.fetchActive();activeThreads.threads.forEach(thread=>{if(!channelIds.includes(thread.id)){channelIds.push(thread.id);itemsAddedNames.push(`💬 ${cleanChannelName(thread.name)}(<#${thread.id}>)`)}})}catch(e){}}else if(allowedTypesToAddDirectly.includes(fetched.type)&&!channelIds.includes(fetched.id)){channelIds.push(fetched.id);itemsAddedNames.push(`<#${fetched.id}>`)}}}channelIds=[...new Set(channelIds)];if(channelIds.length===0){await message.reply("لم يتم العثور على أي قنوات/عناصر صالحة للإضافة.");return;}const currentConfig=await db.get("SELECT monitored_channels FROM config WHERE guild_id = ?",message.guild.id);const existing=currentConfig?.monitored_channels?currentConfig.monitored_channels.split(",").filter(Boolean):[];const updated=[...new Set([...existing,...channelIds])].join(",");await db.run("INSERT INTO config (guild_id, monitored_channels) VALUES (?, ?) ON CONFLICT(guild_id) DO UPDATE SET monitored_channels = excluded.monitored_channels",message.guild.id,updated);const names=itemsAddedNames.length>15?`${itemsAddedNames.slice(0,15).join(", ")} و ${itemsAddedNames.length-15} آخرين...`:itemsAddedNames.join(", ");await message.reply({embeds:[embedSimple(currentLang.SUCCESS_CHANNELS_TITLE,currentLang.SUCCESS_CHANNELS_SET.replace("{channels}",names),0x00aa00)]}); }
                else if (cmd === "removechannel" || cmd === "ReCh") { const mentioned=message.mentions.channels;const argsIds=args.filter(a=>/^\d+$/.test(a));let channelsToRemove=[];const allowedTypesToRemove=[ChannelType.GuildText,ChannelType.GuildAnnouncement,ChannelType.PublicThread,ChannelType.PrivateThread,ChannelType.AnnouncementThread];const categoryChildTypesToRemove=[ChannelType.GuildText,ChannelType.GuildAnnouncement];for(const ch of mentioned.values()){if(ch.type===ChannelType.GuildCategory){ch.children.cache.forEach(child=>{if(categoryChildTypesToRemove.includes(child.type)&&!channelsToRemove.includes(child.id)){channelsToRemove.push(child.id)}})}else if(ch.type===ChannelType.GuildForum){try{const activeThreads=await ch.threads.fetchActive();activeThreads.threads.forEach(thread=>{if(!channelsToRemove.includes(thread.id))channelsToRemove.push(thread.id)})}catch(e){}}else if(allowedTypesToRemove.includes(ch.type)&&!channelsToRemove.includes(ch.id)){channelsToRemove.push(ch.id)}} for(const id of argsIds){if(mentioned.has(id))continue;const fetched=await message.guild.channels.fetch(id).catch(()=>null);if(fetched){if(fetched.type===ChannelType.GuildCategory){fetched.children.cache.forEach(child=>{if(categoryChildTypesToRemove.includes(child.type)&&!channelsToRemove.includes(child.id)){channelsToRemove.push(child.id)}})}else if(fetched.type===ChannelType.GuildForum){try{const activeThreads=await fetched.threads.fetchActive();activeThreads.threads.forEach(thread=>{if(!channelsToRemove.includes(thread.id))channelsToRemove.push(thread.id)})}catch(e){}}else if(allowedTypesToRemove.includes(fetched.type)&&!channelsToRemove.includes(fetched.id)){channelsToRemove.push(fetched.id)}}}channelsToRemove=[...new Set(channelsToRemove)];if(channelsToRemove.length===0){await message.channel.send({embeds:[embedSimple("خطأ","لم يتم العثور على أي قنوات/عناصر صالحة للإزالة.",0xcc0000)]});return;}const config=await db.get("SELECT monitored_channels FROM config WHERE guild_id = ?",guildId);let currentChannels=config?.monitored_channels?config.monitored_channels.split(",").filter(Boolean):[];let removedChannelsIds=[];const channelsToRemoveSet=new Set(channelsToRemove);const newChannels=currentChannels.filter(id=>{if(channelsToRemoveSet.has(id)){removedChannelsIds.push(id);return false}return true});if(removedChannelsIds.length===0){const mentionedList=channelsToRemove.map(id=>`<#${id}>`).join(" , ");await message.channel.send({embeds:[embedSimple("خطأ في الإزالة",`العناصر التي حددتها (${mentionedList}) لم تكن مُعيّنة للمراقبة أصلاً.`,0xcc0000)]});return;}const csv=newChannels.join(",");await db.run(`UPDATE config SET monitored_channels = ? WHERE guild_id = ?`,csv,guildId);const removedChannelList=removedChannelsIds.map(id=>`<#${id}>`).join(" , ");await message.channel.send({embeds:[embedSimple(currentLang.SUCCESS_CHANNEL_REMOVED_TITLE,currentLang.SUCCESS_CHANNEL_REMOVED.replace('{channels}',removedChannelList),0xFF0000)]}); }
                else if (cmd === "listchannels" || cmd === "Lch") { const config=await db.get("SELECT monitored_channels FROM config WHERE guild_id = ?",guildId);const monitoredChannelsIds=config?.monitored_channels?config.monitored_channels.split(",").filter(Boolean):[];let listItems=[];if(monitoredChannelsIds.length===0){listItems=[currentLang.ERROR_NO_CHANNELS_SET]}else{listItems=monitoredChannelsIds.map((id,index)=>`${index+1} - <#${id}>`)}const custom = await getCustomization(db, guildId, 'listchannels');const{embed,components}=createPaginatedListEmbed(currentLang.SUCCESS_CHANNELS_LIST_TITLE,listItems,0,PAGINATION_LIMIT,"list_ch_page_prefix", custom);await message.channel.send({embeds:[embed],components:components}); }
                else if (cmd === "listpublishers" || cmd === "LP") { const rows=await db.all(`SELECT user_id FROM publishers WHERE guild_id = ? ORDER BY display_name ASC`,guildId);let listItems=rows.map((row,index)=>`${index+1} - <@${row.user_id}>`);if(rows.length===0){listItems=[currentLang.ERROR_NO_PUBLISHERS]}const custom = await getCustomization(db, guildId, 'listpublishers');const{embed,components}=createPaginatedListEmbed("✥ قائمة الناشرين المسجلين",listItems,0,PAGINATION_LIMIT,"list_pub_page_prefix", custom);await message.channel.send({embeds:[embed],components:components}); }
                else if (cmd === "listadmins") { const config=await db.get("SELECT admin_role_id FROM config WHERE guild_id = ?",guildId);const adminUserIds=config?.admin_role_id?config.admin_role_id.split(',').filter(id=>id.trim()!==''):[];let listItems=adminUserIds.map((id,index)=>`${index+1} - <@${id}>`);if(adminUserIds.length===0){listItems=["لا يوجد مشرفون معينون."]}const custom = await getCustomization(db, guildId, 'listadmins');const{embed,components}=createPaginatedListEmbed(`✥ قائمة المشرفين`,listItems,0,PAGINATION_LIMIT,"list_admin_page_prefix", custom);await message.channel.send({embeds:[embed],components:components}); }
                else if (cmd === "resetstats") { const mentioned=message.mentions.users.first()||await client.users.fetch(args[0]).catch(()=>null);if(!mentioned){await sendUserError(message.channel,currentLang); return;}const isPublisher=await db.get("SELECT id FROM publishers WHERE guild_id = ? AND user_id = ?",guildId,mentioned.id);if(!isPublisher){const errorTitle=currentLang.ERROR_NO_STATS_TITLE.replace('{tag}',mentioned.tag);const errorDesc=currentLang.ERROR_NO_STATS;await message.channel.send({embeds:[new EmbedBuilder().setTitle(errorTitle).setDescription(errorDesc).setColor(0xcc0000)]}); return;} const resetMode=args[1]?.toLowerCase();let successMessage;if(resetMode==='all'){await db.run("DELETE FROM post_history WHERE guild_id = ? AND user_id = ?",guildId,mentioned.id);await db.run("DELETE FROM channel_points WHERE guild_id = ? AND user_id = ?",guildId,mentioned.id);successMessage=currentLang.SUCCESS_STATS_RESET_ALL.replace('{tag}',mentioned.tag)}else{successMessage=currentLang.SUCCESS_STATS_RESET_USER.replace('{tag}',mentioned.tag);await db.run("UPDATE channel_points SET points = 0 WHERE guild_id = ? AND user_id = ?",guildId,mentioned.id);}await message.channel.send({embeds:[embedSimple("✅ إعادة تعيين النقاط",successMessage,0x00aa00)]}); }
                else if (cmd === "addpublisher" || cmd === "AddP") { const mentionedUsers=message.mentions.users;const argsUsers=args.filter(a=>/^\d{17,19}$/.test(a));let usersToAddMap=new Map();for(const user of mentionedUsers.values()){if(!usersToAddMap.has(user.id)){usersToAddMap.set(user.id,user)}} for(const id of argsUsers){if(!usersToAddMap.has(id)){const fetched=await client.users.fetch(id).catch(()=>null);if(fetched){usersToAddMap.set(id,fetched)}else{}}}const usersToAdd=Array.from(usersToAddMap.values());if(usersToAdd.length===0){await sendUserError(message.channel,currentLang);return;}let addedUsers=[];let failedUsers=[];const custom=await getCustomization(db,guildId,'addpublisher');for(const user of usersToAdd){try{await db.run("INSERT INTO publishers (guild_id,user_id,display_name,last_post_date) VALUES (?,?,?,?)",guildId,user.id,user.tag,new Date().toISOString());addedUsers.push(user.tag);await postPublisherStatsToAdChannel(client,db,user,guildId,currentLang);await new Promise(resolve=>setTimeout(resolve,300))}catch(e){if(e.code==='SQLITE_CONSTRAINT'){failedUsers.push(`${user.tag} ${currentLang.PUBLISHER_ADD_FAIL_ALREADY}`)}else{failedUsers.push(`${user.tag} ${currentLang.PUBLISHER_ADD_FAIL_DB}`);console.error(`Add Pub Prefix Err (${user.tag}):`,e)}}}if(failedUsers.length===0&&addedUsers.length>0){if(addedUsers.length===1){const user=usersToAdd[0];const date=new Date().toLocaleDateString('en-US',{year:'numeric',month:'2-digit',day:'2-digit'});const successEmbed=new EmbedBuilder().setTitle(currentLang.SUCCESS_PUBLISHER_ADDED_TITLE).setDescription(currentLang.SUCCESS_PUBLISHER_ADDED_DESC.replace('{tag}',user.tag)).setColor(custom?.embed_color||0x00aa00).setThumbnail(user.displayAvatarURL({extension:'png',size:256})).addFields({name:currentLang.SUCCESS_PUBLISHER_ADDED_FIELD_1,value:`${user.tag}`,inline:true},{name:currentLang.SUCCESS_PUBLISHER_ADDED_FIELD_2,value:`${date}`,inline:true},{name:INVISIBLE_SPACE,value:INVISIBLE_SPACE,inline:true}).setTimestamp().setImage(custom?.embed_image||null);await message.channel.send({embeds:[successEmbed]})}else{const embed=embedSimple(currentLang.SUCCESS_PUBLISHERS_ADDED_TITLE,`${currentLang.SUCCESS_PUBLISHERS_ADDED_DESC}\n- ${addedUsers.join('\n- ')}`,0x00aa00);await message.channel.send({embeds:[embed]})}}else if(addedUsers.length>0){const embed=embedSimple(currentLang.ERROR_PUBLISHERS_ADD_FAIL_TITLE,`${currentLang.SUCCESS_PUBLISHERS_ADDED_DESC}\n- ${addedUsers.join('\n- ')}\n\n${currentLang.ERROR_PUBLISHERS_ADD_FAIL_DESC}\n- ${failedUsers.join('\n- ')}`,0xffcc00);await message.channel.send({embeds:[embed]})}else{const embed=embedSimple(currentLang.ERROR_PUBLISHERS_ADD_FAIL_TITLE,`${currentLang.ERROR_PUBLISHERS_ADD_FAIL_DESC}\n- ${failedUsers.join('\n- ')}`,0xcc0000);await message.channel.send({embeds:[embed]})}}
                else if (cmd === "removepublisher" || cmd === "ReP") { const mentioned=message.mentions.users.first()||await client.users.fetch(args[0]).catch(()=>null);if(!mentioned){await sendUserError(message.channel,currentLang); return;}const publisherData=await db.get("SELECT ad_message_id FROM publishers WHERE guild_id = ? AND user_id = ?",guildId,mentioned.id);const adMessageId=publisherData?.ad_message_id;const stats=await db.get("SELECT SUM(points) AS total_points FROM channel_points WHERE guild_id = ? AND user_id = ?",guildId,mentioned.id);const totalPoints=stats?.total_points||0;const resultPub=await db.run("DELETE FROM publishers WHERE guild_id = ? AND user_id = ?",guildId,mentioned.id);if(resultPub.changes===0){const errorTitle=currentLang.ERROR_PUBLISHER_NOT_FOUND_TITLE.replace('{tag}',mentioned.tag);const errorDesc=currentLang.ERROR_PUBLISHER_NOT_FOUND;await message.channel.send({embeds:[embedSimple(errorTitle,errorDesc,0xcc0000)]}); return;}await db.run("DELETE FROM channel_points WHERE guild_id = ? AND user_id = ?",guildId,mentioned.id);await db.run("DELETE FROM post_history WHERE guild_id = ? AND user_id = ?",guildId,mentioned.id);if(adMessageId){let adChannel = null; try { const config = await db.get("SELECT ad_channel_id FROM config WHERE guild_id = ?", guildId); if (config && config.ad_channel_id) { adChannel = await client.channels.fetch(config.ad_channel_id).catch(()=>{}); } if (adChannel) { await adChannel.messages.delete(adMessageId).catch(err => { if (err.code !== 10008) { console.error(`Remove Pub Prefix Err (Delete Ad Msg ${adMessageId}): ${err.message}`); } }); } } catch (e) { console.error(`Remove Pub Prefix Err (Outer): ${e.message}`); } } const removeEmbed=new EmbedBuilder().setTitle(currentLang.SUCCESS_PUBLISHER_REMOVED).setDescription("تمت ازالته وحذف سجلات النقاط بنـجاح").setColor(0xFF0000).setThumbnail(mentioned.displayAvatarURL({extension:'png',size:256})).setTimestamp().addFields({name:"✶الـنـاشـر",value:`${mentioned}`,inline:true},{name:"✶النقاط",value:`**${totalPoints}**`,inline:true},{name:INVISIBLE_SPACE,value:INVISIBLE_SPACE,inline:true});await message.channel.send({embeds:[removeEmbed]}); }
                else if (cmd === "channelstats" || cmd === "cstats") { let targetChannel=message.mentions.channels.first();const channelInput=args[0];if(!targetChannel&&channelInput){const mentionMatch=channelInput.match(/^<#(\d+)>$/);if(mentionMatch){targetChannel=message.guild.channels.cache.get(mentionMatch[1])}else if(/^\d+$/.test(channelInput)){targetChannel=message.guild.channels.cache.get(channelInput)}}let filterKey='all';let filterDays=0;const filterArg=targetChannel?args[1]:args[0];if(filterArg&&filterArg.toLowerCase()!=='all'){const daysMatch=filterArg.toLowerCase().match(/^(\d+)d$/);if(daysMatch){filterDays=parseInt(daysMatch[1]);filterKey=daysMatch[1]+'d'}else if(['1d','7d','30d'].includes(filterArg.toLowerCase())){filterDays=parseInt(filterArg.replace('d',''));filterKey=filterArg.toLowerCase()}} const config=await db.get("SELECT monitored_channels FROM config WHERE guild_id = ?",guildId);const monitoredChannelsIds=config?.monitored_channels?config.monitored_channels.split(",").filter(Boolean):[];if(monitoredChannelsIds.length===0){await message.reply({embeds:[embedSimple(currentLang.ERROR_NO_CHANNELS_SET,"",0xcc0000)]});return;}const channelsToQuery=targetChannel?[targetChannel.id]:monitoredChannelsIds;const{embed,components}=await createChannelStatsEmbed(message.guild,channelsToQuery,filterDays,currentLang,filterKey, 0, db); embed.setImage(CHANNEL_STATS_IMAGE); await message.channel.send({embeds:[embed],components:components}); }
                else if (cmd === "stats" || cmd === "top") { let targetUser=message.mentions.users.first()||(args.length > 0 && /^\d{17,19}$/.test(args[0]) ? await client.users.fetch(args[0]).catch(()=>null) : null);let targetChannel=message.mentions.channels.first();if(!targetChannel){const inputIndex=targetUser&&(message.mentions.users.has(targetUser.id)||args[0]===targetUser.id)?1:0;const channelInput=args[inputIndex];if(channelInput){const mentionMatch=channelInput.match(/^<#(\d+)>$/);if(mentionMatch){targetChannel=message.guild.channels.cache.get(mentionMatch[1])}else if(/^\d+$/.test(channelInput)){targetChannel=message.guild.channels.cache.get(channelInput)}}}if(!targetUser||cmd==="top"){const pageSize=5;const rows=await db.all(`SELECT p.user_id,SUM(cp.points) AS total_points FROM publishers p LEFT JOIN channel_points cp ON p.user_id=cp.user_id AND p.guild_id=cp.guild_id WHERE p.guild_id=? GROUP BY p.user_id ORDER BY total_points DESC`,guildId);const custom=await getCustomization(db,guildId,'stats_top');const{embed,components}=await createStatsEmbedPage(message.guild,rows,0,pageSize,currentLang,custom);await message.channel.send({embeds:[embed],components:components});return;}const isPublisher=await db.get("SELECT id FROM publishers WHERE guild_id = ? AND user_id = ?",guildId,targetUser.id);if(!isPublisher){const nickname=message.guild.members.cache.get(targetUser.id)?.displayName||targetUser.username;const errorTitle=`✶ هـمم ... (${nickname})`;const errorDesc=`✶ المستخدم غير معين كناشر`;await message.channel.send({embeds:[new EmbedBuilder().setTitle(errorTitle).setDescription(errorDesc).setColor(0xcc0000)]});return;}const{pointsData,dateData,monitoredChannels}=await getDetailedStatsData(targetUser.id,guildId,0);if(targetChannel){const channelIdToQuery=targetChannel.id;const config=await db.get("SELECT monitored_channels FROM config WHERE guild_id = ?",guildId);const monitored=config?.monitored_channels?config.monitored_channels.split(",").filter(Boolean):[];if(!monitored.includes(channelIdToQuery)){const errorData=currentLang.ERROR_CHANNEL_NOT_MONITORED;await message.reply({embeds:[embedSimple(errorData.title,errorData.description,0xcc0000)]});return;}const nickname=message.guild.members.cache.get(targetUser.id)?.displayName||targetUser.username;const channelStats=await db.get("SELECT points FROM channel_points WHERE guild_id=? AND user_id=? AND channel_id=?",guildId,targetUser.id,channelIdToQuery);const pointsInChannel=channelStats?.points||0;const overallPoints=pointsData.allTotalPoints;const channelEmbed=embedSimple(currentLang.STATS_USER_CHANNEL_TITLE.replace('{nickname}',nickname),INVISIBLE_SPACE,DEFAULT_EMBED_COLOR).setThumbnail(targetUser.displayAvatarURL({dynamic:true,size:256})).addFields({name:currentLang.STATS_CHANNEL_NAME_FIELD,value:`<#${channelIdToQuery}>`,inline:false},{name:currentLang.STATS_CHANNEL_POINTS,value:`**${pointsInChannel}**`,inline:true},{name:currentLang.STATS_CHANNEL_TOTAL,value:`**${overallPoints}**`,inline:true});await message.channel.send({embeds:[channelEmbed]});return;}const{embed,components}=await createDetailedStatsEmbed(targetUser,message.guild,currentLang,0,pointsData,dateData,monitoredChannels,0);await message.channel.send({embeds:[embed],components:components}); }
                else {
                    commandAttempted = false;
                }
            } catch (cmdError) {
                 console.error(`[handleMessageCreate] Error executing command !${cmd}:`, cmdError);
                 await message.reply("❌ حدث خطأ أثناء تنفيذ الأمر.").catch(console.error);
                 commandAttempted = true;
             }

             if(commandAttempted) return;
        } else { return; }
    }

    // --- معالجة تسجيل النقاط ---
    if (!isDM) {
        try {
            if (!db) return;
            const config = await db.get("SELECT monitored_channels FROM config WHERE guild_id = ?", guildId);
            if (!config || !config.monitored_channels) return;
            const monitoredChannels = config.monitored_channels.split(",").filter(Boolean);
            const channelIdToRecord = await getChannelIdToRecord(message, monitoredChannels);
            if (!channelIdToRecord) return;
            const isPublisher = await db.get("SELECT id FROM publishers WHERE guild_id = ? AND user_id = ?", guildId, message.author.id);
            if (!isPublisher) return;
            const نقاط = extractLinksCount(message);
            if (نقاط > 0) {
                const userId = message.author.id;
                await db.run( `INSERT INTO channel_points (guild_id, user_id, channel_id, points, last_post_date) VALUES (?, ?, ?, ?, ?) ON CONFLICT(guild_id, user_id, channel_id) DO UPDATE SET points = points + ?, last_post_date = ?`, guildId, userId, channelIdToRecord, نقاط, new Date().toISOString(), نقاط, new Date().toISOString() );
                await db.run( `UPDATE publishers SET last_post_date = ? WHERE guild_id = ? AND user_id = ?`, new Date().toISOString(), guildId, userId );
                await db.run( `INSERT INTO post_history (guild_id, user_id, channel_id, points_gained, post_date) VALUES (?, ?, ?, ?, ?)`, guildId, userId, channelIdToRecord, نقاط, new Date().toISOString() );
                const targetChannel = message.guild.channels.cache.get(channelIdToRecord) || await message.guild.channels.fetch(channelIdToRecord).catch(()=>null);
                const channelName = targetChannel ? cleanChannelName(targetChannel.name) : channelIdToRecord;
                console.log( currentLang.LOG_POINTS_INCREASED.replace('{points}', نقاط).replace('{tag}', message.author.tag).replace('{channelName}', channelName) );
            }
        } catch (e) { console.error(`Points Recording Error (Guild: ${guildId}, User: ${message.author?.id}, Channel: ${message.channel?.id}):`, e); }
    }
}